import { BaseApiService } from '../core/BaseApiService';
import { SalesValidationService } from '@/components/sales/SalesValidationService';
import type { Sale, CreateSaleData } from './types';
import { supabase } from '@/integrations/supabase/client';

export class SalesApiService extends BaseApiService<Sale, CreateSaleData> {
  constructor() {
    super('sales');
    this.selectQuery = `
      *,
      client:clients(id, type, first_name, last_name, company_name, contact_person, email, phone),
      salesperson:profiles(id, username),
      sale_items(
        id,
        product_id,
        quantity,
        unit_price,
        total_price,
        serial_number,
        product:products(id, brand, model, year)
      )
    `;
  }

  async search(searchTerm: string): Promise<Sale[]> {
    if (!searchTerm.trim()) return this.getAll();
    
    const searchPattern = `%${searchTerm.trim()}%`;
    
    const query = this.supabase
      .from(this.tableName as any)
      .select(this.selectQuery)
      .or(`sale_number.ilike.${searchPattern},notes.ilike.${searchPattern}`)
      .order('created_at', { ascending: false });
    
    return this.performQuery(query, 'searching');
  }

  async create(saleData: CreateSaleData): Promise<Sale> {
    console.log('Creating sale with data:', saleData);
    
    // Enhanced validation
    const validation = await SalesValidationService.validateSaleData(saleData);
    if (!validation.isValid) {
      throw new Error(`Validation failed: ${validation.errors.join(', ')}`);
    }

    // Validate stock for products
    const productItems = saleData.sale_items.map(item => ({
      product_id: item.product_id,
      quantity: item.quantity
    }));
    
    const { error: stockError } = await supabase.rpc('validate_product_stock', {
      product_items: productItems
    });
    
    if (stockError) {
      throw new Error(stockError.message || 'Insufficient stock for one or more products');
    }

    // Calculate subtotal, tax, and total
    const subtotal = saleData.sale_items.reduce((sum, item) => sum + (item.quantity * item.unit_price), 0);
    const discountAmount = saleData.discount_amount || 0;
    const discountPercentage = saleData.discount_percentage || 0;
    const finalDiscount = discountAmount + (subtotal * discountPercentage / 100);
    const discountedSubtotal = subtotal - finalDiscount;
    const taxAmount = discountedSubtotal * 0.22; // 22% VAT
    const totalAmount = discountedSubtotal + taxAmount;

    // Create the sale record (sale_number will be auto-generated by trigger)
    const saleRecord = {
      client_id: saleData.client_id || null,
      salesperson_id: saleData.salesperson_id,
      status: saleData.status || 'completed',
      payment_method: saleData.payment_method,
      payment_type: saleData.payment_type || 'single',
      cash_amount: saleData.cash_amount || 0,
      card_amount: saleData.card_amount || 0,
      bank_transfer_amount: saleData.bank_transfer_amount || 0,
      discount_amount: finalDiscount,
      discount_percentage: saleData.discount_percentage || 0,
      subtotal,
      tax_amount: taxAmount,
      total_amount: totalAmount,
      notes: saleData.notes || null
    };

    try {
      const { data, error: saleError } = await supabase
        .from('sales')
        .insert(saleRecord as any)
        .select(this.selectQuery)
        .single();

      if (saleError) {
        console.error('Sale creation error:', saleError);
        throw new Error(saleError.message || 'Failed to create sale');
      }

      if (!data || typeof data === 'string') {
        throw new Error('No sale data returned after creation');
      }

      const sale = data as any;

      // Create sale items
      const saleItemsData = saleData.sale_items.map(item => ({
        sale_id: sale.id,
        product_id: item.product_id,
        quantity: item.quantity,
        unit_price: item.unit_price,
        total_price: item.quantity * item.unit_price,
        serial_number: item.serial_number || null
      }));

      const { error: itemsError } = await supabase
        .from('sale_items')
        .insert(saleItemsData);

      if (itemsError) {
        // Clean up the sale if item creation fails
        await supabase.from('sales').delete().eq('id', sale.id);
        throw new Error(itemsError.message);
      }

      return sale;
    } catch (error) {
      console.error('Error creating sale:', error);
      throw error;
    }
  }

  async update(id: string, saleData: Partial<CreateSaleData>): Promise<Sale> {
    // Handle sale items updates if provided
    if (saleData.sale_items) {
      // Validate stock for new quantities
      const productItems = saleData.sale_items.map(item => ({
        product_id: item.product_id,
        quantity: item.quantity
      }));
      
      const { error: stockError } = await supabase.rpc('validate_product_stock', {
        product_items: productItems
      });
      
      if (stockError) {
        throw new Error(stockError.message || 'Insufficient stock for one or more products');
      }
      
      // Delete existing sale items
      const { error: deleteError } = await supabase
        .from('sale_items')
        .delete()
        .eq('sale_id', id);
      
      if (deleteError) {
        this.handleError('deleting old sale items', deleteError);
      }
      
      // Create new sale items
      const saleItems = saleData.sale_items.map(item => ({
        sale_id: id,
        product_id: item.product_id,
        quantity: item.quantity,
        unit_price: item.unit_price,
        total_price: item.unit_price * item.quantity,
        serial_number: item.serial_number
      }));
      
      const { error: itemsError } = await supabase
        .from('sale_items')
        .insert(saleItems);
      
      if (itemsError) {
        this.handleError('creating new sale items', itemsError);
      }
      
      // Recalculate totals
      const subtotal = saleData.sale_items.reduce((sum, item) => 
        sum + (item.unit_price * item.quantity), 0
      );
      const taxAmount = subtotal * 0.22;
      const totalAmount = subtotal + taxAmount;
      
      // Update sale with new totals
      const updateData = {
        ...saleData,
        subtotal,
        tax_amount: taxAmount,
        total_amount: totalAmount,
        sale_items: undefined // Remove from update object
      };
      
      return super.update(id, updateData as Partial<CreateSaleData>);
    }
    
    // Simple update without item changes
    return super.update(id, saleData);
  }

  async delete(id: string): Promise<boolean> {
    // Delete sale items first (this will restore stock via triggers)
    const { error: itemsError } = await supabase
      .from('sale_items')
      .delete()
      .eq('sale_id', id);
    
    if (itemsError) {
      this.handleError('deleting sale items', itemsError);
    }
    
    // Delete the sale
    return super.delete(id);
  }
}